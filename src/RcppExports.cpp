// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_variance
double cpp_variance(const arma::vec& x);
RcppExport SEXP _SHT_cpp_variance(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_variance(x));
    return rcpp_result_gen;
END_RCPP
}
// adjust_clime
arma::mat adjust_clime(arma::mat omega);
RcppExport SEXP _SHT_adjust_clime(SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(adjust_clime(omega));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _SHT_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SHT_cpp_variance", (DL_FUNC) &_SHT_cpp_variance, 1},
    {"_SHT_adjust_clime", (DL_FUNC) &_SHT_adjust_clime, 1},
    {"_SHT_timesTwo", (DL_FUNC) &_SHT_timesTwo, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SHT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
