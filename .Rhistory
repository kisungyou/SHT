output
?lsolve.bicgstab
mu0=rep(0,ncol(X))
alpha=0.05
##############################################################
# COMPUTATION : PRELIMINARY
n      = nrow(X)
p      = ncol(X)
xbar   = colMeans(X)
Sigma  = cov(X)   # sample covariance
SigBar = Sigma/n  # divided by n
##############################################################
# COMPUTATION : HYPOTHESIS and DETERMINATION
vecdiff = as.vector(xbar)-as.vector(mu0)
t2      = sum(as.vector(lsolve.bicgstab(SigBar, vecdiff)$x)*vecdiff) # test statistic
require(Rlinsolve)
t2      = sum(as.vector(lsolve.bicgstab(SigBar, vecdiff)$x)*vecdiff) # test statistic
library(SHT)
t2      = sum(as.vector(lsolve.bicgstab(SigBar, vecdiff)$x)*vecdiff) # test statistic
t2
t2adj   = ((n-p)*t2/(p*(n-1)))
t2adj
pvalue  = pf(t2adj,p,(n-p),lower.tail = FALSE)
pvalue
library(SHT)
library(SHT)
mean1.Hotelling(X)
library(SHT)
X
X = matrix(rnorm(100),nrow=20)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
library(SHT)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
X=matrix(rnorm(100),nrow=20);mean1.Hotelling(X)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
?pinv
??pinv
?trace
?tr
library(SHT)
X = matrix(rnorm(20*5),nrow=5)
Y = matrix(rnorm(20*6),nrow=6)
Z = matrix(rnorm(50*5),nrow=50)
X = matrix(rnorm(20*5),nrow=20)
Y = matrix(rnorm(20*6),nrow=20)
Z = matrix(rnorm(50*5),nrow=50)
mean2.Hotelling(X,Y)
mean2.Hotelling(X,Z)
mean2.Hotelling(X,Z,var.equal = FALSE)
mean2.Hotelling(X,Z,var.equal = FALSE)
mean2.Hotelling(X,Z,var.equal = FALSE)
mean2.Hotelling(X,Z,var.equal = FALSE)
mean2.Hotelling(X,Z,var.equal = FALSE)
mean2.Hotelling(X,Z,var.equal = FALSE)
rm(list=ls())
library(SHT)
X = matrix(rnorm(1000*3),nrow=1000)
Y = matrix(rnorm(200*3), nrow=200)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean1.Hotelling(X)
mean2.Hotelling(X,Y)
mean2.Hotelling(X,Y)
mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
X=matrix(rnorm(1000*5),nrow=1000);Y=matrix(rnorm(100*5),nrow=100);mean2.Hotelling(X,Y,var.equal = FALSE)
library(SHT)
x = rnorm(100)
var(x)
aux_var(x)
pchisq(17.418, 29)
?pchisq
pf(0.8517, 79, 119)
?vartest
install.packages("EnvStats")
?vartest
require(EnvStats)
?vartest
??vartest
x <- rnorm(50, mean = 0, sd = 2)
y <- rnorm(30, mean = 1, sd = 1)
out = var.test(x, y)                  # Do x and y have the same variance?
out
??vartest
dat <- rnorm(20, mean = 2, sd = 1)
varTest(dat, sigma.squared = 0.5)
dat <- rnorm(20, mean = 2, sd = 1)
out = varTest(dat, sigma.squared = 0.5)
names(out)
out$p.value
varTest(dat, sigma.squared = 0.5, alternative="two.sided")
varTest(dat, sigma.squared = 0.5, alternative="two.sided")$p.value
varTest(dat, sigma.squared = 0.5, alternative="greater")$p.value
varTest(dat, sigma.squared = 0.5, alternative="less")$p.value
dat = rnorm(100000)
varTest(dat, sigma.squared = 0.5, alternative="two.sided")$p.value
varTest(dat, sigma.squared = 0.5, alternative="greater")$p.value
varTest(dat, sigma.squared = 0.5, alternative="less")$p.value
varTest(dat, sigma.squared = 1, alternative="two.sided")$p.value
varTest(dat, sigma.squared = 0.5, alternative="two.sided")$p.value
varTest(dat, sigma.squared = 1, alternative="two.sided")$p.value
varTest(dat, sigma.squared = 1, alternative="greater")$p.value
varTest(dat, sigma.squared = 1, alternative="less")$p.value
pchisq((length(dat)-1)*sd(dat), df=(length(dat)-1))
?pchisq
length(dat)
rm(list=ls())
dat = rnorm(100)
n = length(dat)
vardat = var(dat)
pchisq((n-1)*vardat, df=(n-1), lower.tail=FALSE)
varTest(dat)
pchisq((n-1)*vardat, df=(n-1), lower.tail=FALSE)
varTest(dat)$p.value
varTest(dat, alternative="greater")$p.value
pchisq((n-1)*vardat, df=(n-1), lower.tail=TRUE)
varTest(dat, alternative="two.sided")$p.value
library(SHT)
var1.chisq(dat)
x <- rnorm(50, mean = 0, sd = 2)
y <- rnorm(30, mean = 1, sd = 1)
var.test(x,y,alternative="two.sided")$p.value
var.test(x,y,alternative="less")$p.value
var.test(x,y,alternative="greater]")$p.value
var.test(x,y,alternative="greater")$p.value
var.test(y,z,alternative="two.sided")$p.value
var.test(y,x,alternative="two.sided")$p.value
var.test(y,x,alternative="less")$p.value
?pchisq
?pf
?opf
?pf
library(SHT)
check_dlist1_single <- function(x){
cond1 = ((is.vector(x)))
cond2 = (all(!is.infinite(x)))
cond3 = (all(!is.na(x)))
cond4 = (all(!is.complex(x)))
if (cond1&&cond2&&cond3&&cond4){
return(TRUE)
} else {
return(FALSE)
}
}
data = list()
data[[1]] = rnorm(3)
data[[2]] = rnorm(5)
lapply(data, check_dlist1_single)
check_dlist1d <- function(dlist){
cond1 = (is.list(dlist))
cond2 = (length(dlist)>=2)
cond3 = (all(unlist(lapply(dlist,check_dlist1d_single))==TRUE))
if (cond1&&cond2&&cond3){
return(TRUE)
} else {
stop()
}
}
check_dlist1d(data)
check_dlist1d_single <- function(x){
cond1 = ((is.vector(x)))
cond2 = (all(!is.infinite(x)))
cond3 = (all(!is.na(x)))
cond4 = (all(!is.complex(x)))
if (cond1&&cond2&&cond3&&cond4){
return(TRUE)
} else {
return(FALSE)
}
}
check_dlist1d(data)
data[[3]] = NA
check_dlist1d(data)
library(SHT)
data
data[[3]] = rnorm(10)
vark.Bartlett(data)
?log
hh = "hey\;"
hh = "hey\\"
hh = "hey\'"
hh
library(SHT)
data
data[[1]] = rnorm(100)
data[[2]] = rnorm(100)
data[[3]] = rnorm(100)
vark.Bartlett(data)
vark.Bartlett(data)
library(SHT)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
?abs
data = list(3)
data
data = list(length=30)
data
rm(list=ls())
(for i in 1:5){print(rnorm(1))}
for (i in 1:4){print(rnorm(1))}
data = list()
data[[1]] = 1:5
data[[2]] = 6:10
mean(unlist(data))
unlist(data)
?median
?mean
x
x = rnorm(3)
x(1)
x[1]
library(SHT)
output = rep(0,1000)
for (i in 1:1000){}
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.Levene(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)
?median
median(1:5)
median(1:6)
library(SHT)
library(SHT)
library(SHT)
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.Levene(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.Levene(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.Levene(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.Levene(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.Levene(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)/1000
is.list(data)
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)/1000
sum(output)/1000
sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}; sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}; sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}; sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}; sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}; sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}; sum(output)/1000
require(CovTools)
install.packages("CovTools")
?lm
??aov
x = c(rnorm(10),c(rnorm(10),c(rnorm(10))))
group = as.factor(c(rep(1,10),rep(2,10),rep(3,10)))
summary(aov(x~group))
?aov
aovout = aov(x~group)
aovout$coefficients
aovout
aovout$fitted.values
names(aovout)
aovout$assign
aovout$qr
aovout$p.value
##############################################################
# COMPUTATION : USE AOV INTERFACE
aovout = summary(aov(data~group))
aovout = summary(aovout)
names(aovout)
aovout
class(aovout)
aovout[1,1]
aovout
typeof(aovout)
names(aovout)
names(aovout)
aovout
data = x
aovout = aov(data~group)
aovout$model
aovout
aovout
aovout$effects
aovout$contrasts
aovout$terms
aovout$model
aovout$call
aovout$xlevels
?anova
class(aovout)
aovout$residuals
aovout$effects
summary(aovout)
as.matrix(summary(aovout))
ss = as.matrix(summary(aovout))
ss
ss(1,1)
ss[1,1]
ss = summary(aovout)
ss
class(ss)
unlist(ss)
##############################################################
# COMPUTATION : USE AOV INTERFACE
aovout = unlist(summary(aov(data~group)))
aovout[5]
aovout[6]
aovout[8]
aovout[7]
thestat = as.double(aovout[7])
thestat
pvalue  = as.double(aovout[9])
pvalue
rm(list=ls())
library(SHT)
dlist=li
data = list()
data[[1]] = rnorm(100)
data[[2]] = rnorm(50)
data[[3]] = rnorm(100)
output = meank.anova(data)
library(SHT)
data = list()
data[[1]] = rnorm(100)
data[[2]] = rnorm(50)
data[[3]] = rnorm(100)
output = meank.anova(data)
output
tester = rep(0,1000)
for (i in 1:1000){
data = list()
data[[1]] = rnorm(100)
data[[2]] = rnorm(50)
data[[3]] = rnorm(100)
output = meank.anova(data)
if (output$p.value < 0.05){
tester[i] = 1
}
}
print(sum(tester)/1000)
tester = rep(0,1000)
for (i in 1:1000){
data = list()
data[[1]] = rnorm(100)
data[[2]] = rnorm(50)
data[[3]] = rnorm(100)
output = meank.anova(data)
if (output$p.value < 0.05){
tester[i] = 1
}
}
print(sum(tester)/1000)
tester = rep(0,1000)
for (i in 1:1000){
data = list()
data[[1]] = rnorm(100)
data[[2]] = rnorm(50)
data[[3]] = rnorm(100)
output = meank.anova(data)
if (output$p.value < 0.05){
tester[i] = 1
}
}
print(sum(tester)/1000)
tester = rep(0,1000)
for (i in 1:1000){
data = list()
data[[1]] = rnorm(100)
data[[2]] = rnorm(50)
data[[3]] = rnorm(100)
output = meank.anova(data)
if (output$p.value < 0.05){
tester[i] = 1
}
}
print(sum(tester)/1000)
library(SHT)
?CovTools
??CovTools
library(SHT)
x = c(10,50,100,200,400)
y = x*(x+1)/2
y
