for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
y = rnorm(100)  # sample y from N(0,1)
counter[i] = ifelse(mvar2.1930PN(x,y)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar2.1930PN'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
library(SHT)
mvar2.1930PN(x, y)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
y = rnorm(100)  # sample y from N(0,1)
counter[i] = ifelse(mvar2.1930PN(x,y)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar2.1930PN'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
y = rnorm(100)  # sample y from N(0,1)
counter[i] = ifelse(mvar2.1930PN(x,y)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar2.1930PN'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
y = rnorm(100)  # sample y from N(0,1)
counter[i] = ifelse(mvar2.1930PN(x,y)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar2.1930PN'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
library(SHT)
# 12. aux_plrt ------------------------------------------------------------
#' @keywords internal
#' @noRd
aux_plrt <- function(x, y, k = 500){
# x is the vector containg the x sample values
# y is the vector containg the y sample values
# k is the number of Legendre quadrature points
# The output of plrt includes the value lam of the likelihood ratio test statistic
# for testing the equality of two independent normal distributions, and the P-value
# of the test P(lambda_{n,m} <= lam)
# Generate the Legendre quadrature points
# r contains the nodes, w contains the weights
Legendre <- function(p) {
x <- matrix(0, p, p)
b <- c(1:(p - 1))^2
b <- sqrt(b/(4 * b - 1))
for(i in 2:p) {
x[i, i - 1] <- b[i - 1]
}
x <- x + t(x)
a <- eigen(x)
u <- a$values
v <- a$vectors
w <- 2 * v[1,  ]^2
cbind(u[p:1], w[p:1])
}
z <- Legendre(k)
r <- z[, 1]
w <- z[, 2]
# Compute the likelihood ratio test statistic
n <- length(x)
m <- length(y)
xb <- mean(x)
yb <- mean(y)
u <- mean(c(x, y))
num <- (sum((x - xb)^2)/n)^(n/2) * (sum((y - yb)^2)/m)^(m/2)
den <- ((sum((x - u)^2) + sum((y - u)^2))/(n + m))^((n + m)/2)
lam <- num/den
# Locate the intervals containing the two roots a and b, and find a and b
u <- seq(0,1,0.005)
v <- (exp(log(lam)+n/2*log(n)+m/2*log(m)-(n+m)/2*log(n+m)-n/2*log(u)))^(2/m)
u <- u[1-u>v]
fn <- function(w, ...)
{
1-w - (exp(log(lam)+n/2*log(n)+m/2*log(m)-(n+m)/2*log(n+m)-n/2*log(w)))^(2/m)
}
a <- uniroot(fn, lower = 1e-10, upper = u[1], tol=1e-8, lam = lam, n = n, m = m)$root
b <- uniroot(fn, lower = u[1], upper = 1-1e-10, tol=1e-8, lam = lam, n = n, m = m)$root
# Compute the double integral
h1 <- (b - a)/2
h2 <- (b + a)/2
w1 <- h1 * r + h2
d1 <- 1 - w1
c1 <- (exp(log(lam)+n/2*log(n)+m/2*log(m)-(n+m)/2*log(n+m)-n/2*log(w1)))^(2/m)
k1 <- (d1 - c1)/2
k2 <- (d1 + c1)/2
s <- rep(0,k)
for(i in 1:k) {
w2 <- k1[i] * r + k2[i]
s[i] <- k1[i] * sum((w1[i]^((n - 1)/2 - 1) * w2^((m - 1)/2 - 1))/sqrt(1 - w1[i] - w2) * w)
}
v <- h1 * sum(s*w)
pv <- 1 - exp(lgamma((n + m - 1)/2) - lgamma((n - 1)/2) - lgamma((m - 1)/2) - lgamma(0.5))*v
cat("Likelihood Ratio Test Statistic = ", round(lam, 4), "\n")
cat("P-value = ", round(pv, 4), "\n")
}
help("uniroot")
plrt(x, y)
aux_plrt(x, y)
library(SHT)
x = rnorm(10)
y = rnorm(10)
mvar2.2012ZXC(x, y)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
y = rnorm(100)  # sample y from N(0,1)
counter[i] = ifelse(mvar2.2012ZXC(x,y)$p.value < 0.05, 1, 0)
}
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
y = rnorm(100)  # sample y from N(0,1)
counter[i] = ifelse(mvar2.2012ZXC(x,y)$p.value < 0.05, 1, 0)
print(paste("* mvar2.2012ZXC : iteration ",i,"/",niter," complete.",sep=""))
}
## print the result
cat(paste("\n* Example for 'mvar2.2012ZXC'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
library(SHT)
mvar1.LRT(rnorm(10))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.LRT(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.LRT(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.LRT(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.LRT(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.LRT(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.LRT(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.LRT(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.LRT(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
library(SHT)
library(SHT)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.1998AS(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.1998AS'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.1998AS(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.1998AS'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
n = 100
x = 10
f <- function(t){n*log(t)-t+x-n*log(n)}
vect = seq(from=0,to=10,length.out=100)
vecf = f(vect)
plot(vect, vecf)
vect = seq(from=0,to=1,length.out=100)
vecf = f(vect)
plot(vect, vecf)
library(SHT)
help("unif.2017YMi")
library(SHT)
library(SHT)
library(SHT)
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
sim2.2020YLL(smallX, smallY) # run the test
library(SHT)
sim2.2020YLL(smallX, smallY) # run the test
library(SHT)
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
sim2.2020YLL(smallX, smallY) # run the test
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(121*10), ncol=10)
Y = matrix(rnorm(169*10), ncol=10)
counter[i] = ifelse(sim2.2020YLL(X,Y)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim2.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(100*10), ncol=50)
Y = matrix(rnorm(100*10), ncol=50)
counter[i] = ifelse(sim2.2020YLL(X,Y,m=100)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim2.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
library(SHT)
sim1.2020YLL(smallX) # run the test
sim1.2020YLL(smallX) # run the test
sim1.2020YLL(smallX) # run the test
sim1.2020YLL(smallX) # run the test
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.LRT(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.LRT(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
library(SHT)
sim1.2020YLL(smallX) # run the test
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=10)
counter[i] = ifelse(sim1.2020YLL(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim1.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=10)
counter[i] = ifelse(sim1.2020YLL(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim1.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
niter   = 10000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=10)
counter[i] = ifelse(sim1.2020YLL(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim1.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
vec.alpha = seq(from=0.01, to=0.99, length.out=100)
vec.error = rep(0,100)
for (i in 1:100){
vec.error[i] = sum((pvalues <= vec.alpha[i]))/length(vec.alpha)
}
opar <- par(pty="s")
plot(vec.alpha, vec.error)
niter   = 10000
pvalues = rep(0,niter)
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=25)
pvalues[i] = sim1.2020YLL(X)$p.value
counter[i] = ifelse(pvalues[i] < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim1.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## visualize
vec.alpha = seq(from=0.01, to=0.99, length.out=100)
vec.error = rep(0,100)
for (i in 1:100){
vec.error[i] = sum((pvalues <= vec.alpha[i]))/length(vec.alpha)
}
opar <- par(pty="s")
plot(vec.alpha, vec.error)
abline(a=0, b=1)
abline(a=1, b=0, lwd=2, col="red")
abline(a=1, b=0, lwd=2, col="red")
abline(a=0, b=1, lwd=2, col="red")
help(abline)
plot(vec.alpha, vec.error, type="l", po)
vec.error
vec.alpha = seq(from=0.01, to=0.99, length.out=100)
vec.error = rep(0,100)
for (i in 1:100){
vec.error[i] = sum((pvalues <= vec.alpha[i]))/length(vec.alpha)
}
vec.error
sum((pvalues <= vec.alpha[i]))
vec.alpha = seq(from=0.01, to=0.99, length.out=100)
vec.error = rep(0,100)
for (i in 1:100){
vec.error[i] = sum((pvalues <= vec.alpha[i]))/length(pvalues)
}
opar <- par(pty="s")
plot(vec.alpha, vec.error, type="l", po)
abline(a=0, b=1, lwd=2, col="red")
opar <- par(pty="s")
plot(vec.alpha, vec.error, type="l")
abline(a=0, b=1, lwd=2, col="red")
plot(vec.alpha, vec.error, type="b", pch=19)
plot(vec.alpha, vec.error, type="b", pch=18)
plot(vec.alpha, vec.error, type="b", pch=17)
plot(vec.alpha, vec.error, type="b")
## empirical Type 1 error
niter   = 10000
pvalues = rep(0,niter)
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=25)
pvalues[i] = sim1.2020YLL(X)$p.value
counter[i] = ifelse(pvalues[i] < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim1.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## visualize
vec.alpha = seq(from=0.01, to=0.99, length.out=100)
vec.error = rep(0,100)
for (i in 1:100){
vec.error[i] = sum((pvalues <= vec.alpha[i]))/length(pvalues)
}
opar <- par(pty="s")
plot(vec.alpha, vec.error, type="b", main="Type 1 Error")
abline(a=0, b=1, lwd=2, col="red")
par(opar)
## empirical Type 1 error
niter   = 10000
pvalues = rep(0,niter)
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=25)
pvalues[i] = sim1.2020YLL(X)$p.value
counter[i] = ifelse(pvalues[i] < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim1.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## visualize
vec.alpha = seq(from=0.01, to=0.99, length.out=100)
vec.error = rep(0,100)
for (i in 1:100){
vec.error[i] = sum((pvalues <= vec.alpha[i]))/length(pvalues)
}
opar <- par(pty="s")
plot(vec.alpha, vec.error, type="b", main="Type 1 Error")
abline(a=0, b=1, lwd=2, col="red")
par(opar)
