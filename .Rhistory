for (i in 1:g){
Sii = Si[[i]]
for (j in 1:g){
Sjj = Si[[j]]
if (i<j){
t1 = (1-(ni[i]-2)/etai[i])*aux_trace(Sii%*%Sii)
t2 = (1-(ni[j]-2)/etai[j])*aux_trace(Sjj%*%Sjj)
t3 = 2*aux_trace(Sii%*%Sjj)
t4 = (ni[i]/etai[i])*((aux_trace(Sii))^2)
t5 = (ni[j]/etai[j])*((aux_trace(Sjj))^2)
mat.tnm[i,j] = (t1+t2-(t3+t4+t5))
}
}
}
mat.tnm
tnm = sum(mat.tnm)
#   2. variance part
aa = ((n^2)/((n+2)*(n-1)))*(aux_trace(S%*%S)-((aux_trace(S)^2)/n))
mat.nij = array(0,c(g,g))
for (i in 1:g){
nii = ni[i]
for (j in 1:g){
njj = ni[j]
if (i<j){
mat.nij[i,j] = (((nii+njj)/(nii*njj))^2)
}
}
}
theta.sq = 4*(aa^2)*(sum(mat.nij)+(g-1)*(g-2)*sum(1/(ni^2)))
theta.sq
sqrt(theta.sq)
theta.sq = 4*(aa^2)*(sum(mat.nij)+(g-1)*(g-2)*sum(1/(ni^2)))
##############################################################
# FINALE
hname   = "Test for Homogeneity of High-Dimensional Covariances by Schott (2007)"
Ha      = "at least one of equalities does not hold."
thestat = tnm/sqrt(theta.sq)
pvalue  = pnorm(thestat, lower.tail = FALSE) # right-hand side
thestat
pvalue
rm(list=ls())
## test when k=5 (samples)
## empirical Type 1 error
k = 5
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(50*5), ncol=5)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
library(SHT)
## test when k=5 (samples)
## empirical Type 1 error
k = 5
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(50*5), ncol=5)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 (samples)
## empirical Type 1 error
k = 5
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(50*5), ncol=5)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 (samples)
## empirical Type 1 error
k = 10
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(50*5), ncol=5)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 (samples)
## empirical Type 1 error
k = 10
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(50*5), ncol=5)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 (samples)
## empirical Type 1 error
k = 10
niter   = 10000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(50*5), ncol=5)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 (samples)
## empirical Type 1 error
k = 3
niter   = 10000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(50*5), ncol=5)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 (samples)
## empirical Type 1 error
k = 3
niter   = 10000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(50*5), ncol=5)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
countkk = rep(0,niter)
for (i in 1:niter){
X = matrix(rnorm(50*5), ncol=10)
Y = matrix(rnorm(50*5), ncol=10)
myda = list()
myda[[1]] = X
myda[[2]] = Y
counter[i] = ifelse(cov2.2007Schott(X, Y)$p.value < 0.05, 1, 0)
countkk[i] = ifelse(covk.2007Schott(myda)$p.value < 0.05, 1, 0)
}
sum(counter)
sum(countkk)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
countkk = rep(0,niter)
for (i in 1:niter){
X = matrix(rnorm(50*5), ncol=10)
Y = matrix(rnorm(50*5), ncol=10)
myda = list()
myda[[1]] = X
myda[[2]] = Y
counter[i] = ifelse(cov2.2007Schott(X, Y)$p.value < 0.05, 1, 0)
countkk[i] = ifelse(covk.2007Schott(myda)$p.value < 0.05, 1, 0)
}
sum(counter)
sum(countkk)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
countkk = rep(0,niter)
for (i in 1:niter){
X = matrix(rnorm(50*5), ncol=10)
Y = matrix(rnorm(50*5), ncol=10)
myda = list()
myda[[1]] = X
myda[[2]] = Y
counter[i] = ifelse(cov2.2007Schott(X, Y)$p.value < 0.05, 1, 0)
countkk[i] = ifelse(covk.2007Schott(myda)$p.value < 0.05, 1, 0)
}
sum(counter)
sum(countkk)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
countkk = rep(0,niter)
for (i in 1:niter){
X = matrix(rnorm(50*5), ncol=10)
Y = matrix(rnorm(50*5), ncol=10)
myda = list()
myda[[1]] = X
myda[[2]] = Y
counter[i] = ifelse(cov2.2007Schott(X, Y)$p.value < 0.05, 1, 0)
countkk[i] = ifelse(covk.2007Schott(myda)$p.value < 0.05, 1, 0)
}
sum(counter)
sum(countkk)
## test when k=5 (samples)
## empirical Type 1 error
k = 3
n = 4
m = 4
niter   = 10000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(n*m), ncol=m)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
library(SHT)
## empirical Type 1 error
k = 3
n = 4
m = 4
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(n*m), ncol=m)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
k = 3
n = 4
m = 4
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(n*m), ncol=m)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
library(SHT)
## test when k=5 (samples)
## empirical Type 1 error
k = 3
n = 4
m = 4
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(n*m), ncol=m)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 (samples)
## empirical Type 1 error
k = 3
n = 4
m = 4
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:k){
mylist[[j]] = matrix(rnorm(n*m), ncol=m)
}
counter[i] = ifelse(covk.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'covk.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
library(SHT)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*5), ncol=10)
Y = matrix(rnorm(50*5), ncol=10)
counter[i] = ifelse(cov2.2007Schott(X, Y)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'cov2.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*5), ncol=10)
Y = matrix(rnorm(50*5), ncol=10)
counter[i] = ifelse(cov2.2007Schott(X, Y)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'cov2.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*5), ncol=10)
Y = matrix(rnorm(50*5), ncol=10)
counter[i] = ifelse(cov2.2007Schott(X, Y)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'cov2.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
help(var)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
help(pchisq)
library(SHT)
## generate samples from uniform distribution
x = runif(1000)
## test with both methods of attaining p-values
test1 = norm.1987JB(x, method="a") # Asymptotics
test2 = norm.1987JB(x, method="m") # Monte Carlo
## generate samples from uniform distribution
x = runif(1000)
## test with both methods of attaining p-values
test1 = norm.1987JB(x, method="a") # Asymptotics
test2 = norm.1987JB(x, method="m") # Monte Carlo
library(SHT)
library(SHT)
## generate samples from uniform distribution
x = runif(1000)
## test with both methods of attaining p-values
test1 = norm.1987JB(x, method="a") # Asymptotics
test2 = norm.1987JB(x, method="m") # Monte Carlo
test1
test2
library(SHT)
## test with both methods of attaining p-values
test1 = norm.1987JB(x, method="a") # Asymptotics
test2 = norm.1987JB(x, method="m") # Monte Carlo
library(normtest)
install.packages("normtest")
library(normtest)
## generate samples from uniform distribution
x = runif(1000)
## test with both methods of attaining p-values
test1 = norm.1987JB(x, method="a") # Asymptotics
test2 = norm.1987JB(x, method="m") # Monte Carlo
test3 = jb.norm.test(x, nrepl=8128)
test1
test2
test3
library(SHT)
library(SHT)
library(SHT)
## generate samples from uniform distribution
x = runif(1000)
## test with both methods of attaining p-values
test1 = norm.1987JB(x, method="a") # Asymptotics
test2 = norm.1987JB(x, method="m") # Monte Carlo
library(SHT)
## generate samples from uniform distribution
x = runif(1000)
## test with both methods of attaining p-values
test1 = norm.1987JB(x, method="a") # Asymptotics
test2 = norm.1987JB(x, method="m") # Monte Carlo
test1
test2
## generate samples from uniform distribution
x = runif(496)
## test with both methods of attaining p-values
test1 = norm.1987JB(x, method="a") # Asymptotics
test2 = norm.1987JB(x, method="m") # Monte Carlo
## generate samples from uniform distribution
x = runif(496)
## test with both methods of attaining p-values
test1 = norm.1987JB(x, method="a") # Asymptotics
test2 = norm.1987JB(x, method="m") # Monte Carlo
test1
test2
## generate samples from uniform distribution
x = runif(496)
## test with both methods of attaining p-values
test1 = norm.1987JB(x, method="a") # Asymptotics
test2 = norm.1987JB(x, method="m", nreps=10000) # Monte Carlo
test2
test1
test2
## test with both methods of attaining p-values
test1 = norm.1987JB(x, method="a") # Asymptotics
test2 = norm.1987JB(x, method="m", nreps=123456) # Monte Carlo
test1
test2
??runif
help(rgamma)
## generate samples from uniform distribution
x = stats::rgamma(496)
## test with both methods of attaining p-values
test1 = norm.2008RJB(x, method="a") # Asymptotics
test2 = norm.2008RJB(x, method="m") # Monte Carlo
## generate samples from uniform distribution
x = stats::rgamma(496, 1)
## test with both methods of attaining p-values
test1 = norm.2008RJB(x, method="a") # Asymptotics
test2 = norm.2008RJB(x, method="m") # Monte Carlo
test1
test2
## generate samples from uniform distribution
x = runif(496)
## test with both methods of attaining p-values
test1 = norm.2008RJB(x, method="a") # Asymptotics
test2 = norm.2008RJB(x, method="m") # Monte Carlo
test1
test2
test
test2 = norm.2008RJB(x, method="m") # Monte Carlo
test2
test2 = norm.2008RJB(x, method="m") # Monte Carlo
test2
rm(list=ls())
library(SHT)
library(SHT)
## generate samples from uniform distribution
x = runif(496)
## test with both methods of attaining p-values
test1 = norm.1987JB(x, method="a") # Asymptotics
test2 = norm.1987JB(x, method="m") # Monte Carlo
test1
test2
## generate samples from uniform distribution
x = runif(496)
## test with both methods of attaining p-values
test1 = norm.1996AJB(x, method="a") # Asymptotics
test2 = norm.1996AJB(x, method="m") # Monte Carlo
test1
test2
## generate samples from uniform distribution
x = runif(496)
## test with both methods of attaining p-values
test1 = norm.1996AJB(x, method="a") # Asymptotics
test2 = norm.1996AJB(x, method="m") # Monte Carlo
test1
test2
