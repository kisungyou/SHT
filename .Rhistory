X = matrix(runif(50*5), ncol=25)
counter[i] = ifelse(unif.2017YMq(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'unif.2017YMq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1234
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(runif(50*5), ncol=25)
counter[i] = ifelse(unif.2017YMq(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'unif.2017YMq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1234
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(runif(50*5), ncol=25)
counter[i] = ifelse(unif.2017YMq(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'unif.2017YMq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1234
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(runif(50*5), ncol=25)
counter[i] = ifelse(unif.2017YMq(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'unif.2017YMq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1234
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(runif(50*5), ncol=25)
counter[i] = ifelse(unif.2017YMq(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'unif.2017YMq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1234
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(runif(50*5), ncol=25)
counter[i] = ifelse(unif.2017YMq(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'unif.2017YMq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1234
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(runif(50*5), ncol=25)
counter[i] = ifelse(unif.2017YMq(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'unif.2017YMq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1234
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(runif(50*5), ncol=25)
counter[i] = ifelse(unif.2017YMq(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'unif.2017YMq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(100*10),ncol=10)
}
unlist(lapply(mylist, nrow))
vec.ni = unlist(lapply(mylist, nrow))
vec.ni[1]
dlist = mylist
vec.Xbar = lapply(dlist, colMeans)
vec.ni = unlist(lapply(dlist, nrow)) # obs : per-class
n = sum(vec.ni)                      # obs : total number
p = ncol(dlist[[1]])
g = length(dlist)
##############################################################
# COMPUTATION : PRELIMINARY
vec.E = lapply(dlist, cov)       # per-class covariance
E = array(0,c(p,p))
for (i in 1:g){
E = E + (vec.E[[i]]*vec.ni[i]) # sum of scatter
}
vec.Xbar = lapply(dlist, colMeans)
Xbar = rep(0,p)
for (i in 1:g){
Xbar = Xbar + (vec.ni[i]*vec.Xbar[[i]])
}
Xbar = Xbar/n
Xbar
H = array(0,c(p,p))
for (i in 1:g){
bdf = as.vector(vec.Xbar[[i]]-Xbar) # bars' difference
H = H + outer(bdf,bdf)*vec.ni[i]
}
vec.ni = unlist(lapply(dlist, nrow)) # obs : per-class
n = sum(vec.ni)                      # obs : total number
p = ncol(dlist[[1]])
g = length(dlist)
##############################################################
# COMPUTATION : PRELIMINARY
vec.E = lapply(dlist, cov)       # per-class covariance
E = array(0,c(p,p))
for (i in 1:g){
E = E + (vec.E[[i]]*vec.ni[i]) # sum of scatter
}
vec.Xbar = lapply(dlist, colMeans)
Xbar = rep(0,p)
for (i in 1:g){
Xbar = Xbar + (vec.ni[i]*vec.Xbar[[i]])
}
Xbar = Xbar/n
H = array(0,c(p,p))
for (i in 1:g){
bdf = as.vector(vec.Xbar[[i]]-Xbar) # bars' difference
H = H + outer(bdf,bdf)*vec.ni[i]
}
e = (n-g)
h = (g-1)
##############################################################
# COMPUTATION : MAIN PART
# 1. the statistic
Tnp = (1/sqrt(n-1))*((aux_trace(H)/h) - (aux_trace(E)/e))
# 2. variance term
a = (1/((e+2)*(e-1)))*(aux_trace(E%*%E) - (1/e)*(aux_trace(E)^2))
Tnp.var = (2/h)*(a/e)
aux_trace <- function(X){
return(sum(diag(X)))
}
##############################################################
# COMPUTATION : PRELIMINARY
vec.E = lapply(dlist, cov)       # per-class covariance
E = array(0,c(p,p))
for (i in 1:g){
E = E + (vec.E[[i]]*vec.ni[i]) # sum of scatter
}
vec.Xbar = lapply(dlist, colMeans)
Xbar = rep(0,p)
for (i in 1:g){
Xbar = Xbar + (vec.ni[i]*vec.Xbar[[i]])
}
Xbar = Xbar/n
H = array(0,c(p,p))
for (i in 1:g){
bdf = as.vector(vec.Xbar[[i]]-Xbar) # bars' difference
H = H + outer(bdf,bdf)*vec.ni[i]
}
e = (n-g)
h = (g-1)
##############################################################
# COMPUTATION : MAIN PART
# 1. the statistic
Tnp = (1/sqrt(n-1))*((aux_trace(H)/h) - (aux_trace(E)/e))
# 2. variance term
a = (1/((e+2)*(e-1)))*(aux_trace(E%*%E) - (1/e)*(aux_trace(E)^2))
Tnp.var = (2/h)*(a/e)
# 3. adjusted statistic and p-value
thestat = Tnp
thestat.adj = Tnp/sqrt(Tnp.var)
pvalue  = stats::pnorm(thestat.adj, lower.tail = FALSE)
pvalue
library(SHT)
help("meank.2007Schott")
library(SHT)
help(useknd)
## CRAN-purpose small example
tinylist = list()
for (i in 1:3){ # consider 3-sample case
tinylist[[i]] = matrix(rnorm(10*3),ncol=3)
}
meank.2007Schott(tinylist)
useknd(tinylist[[1]], tinylist[[2]], "meank.2007Schott")
## CRAN-purpose small example
tinylist = list()
for (i in 1:3){ # consider 3-sample case
tinylist[[i]] = matrix(rnorm(10*3),ncol=3)
}
meank.2007Schott(tinylist)
useknd(tinylist[[1]], tinylist[[2]], "meank.2007Schott")
## CRAN-purpose small example
tinylist = list()
for (i in 1:3){ # consider 3-sample case
tinylist[[i]] = matrix(rnorm(10*3),ncol=3)
}
meank.2007Schott(tinylist)
useknd(tinylist[[1]], tinylist[[2]], "meank.2007Schott")
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*50),ncol=50)
}
counter[i] = ifelse(meank.2019CPH(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2019CPH'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*50),ncol=50)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*50),ncol=50)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*50),ncol=50)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*50),ncol=50)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*50),ncol=50)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*5),ncol=5)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*5),ncol=5)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*5),ncol=5)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*5),ncol=5)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*5),ncol=5)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*5),ncol=5)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*5),ncol=5)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*5),ncol=5)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*5),ncol=5)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*5),ncol=5)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*5),ncol=5)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 samples with (n,p) = (10,50)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = matrix(rnorm(10*5),ncol=5)
}
counter[i] = ifelse(meank.2007Schott(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.2007Schott'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
library(SHT)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
smallX = matrix(rnorm(10*3),ncol=10)
smallY = matrix(rnorm(10*3),ncol=10)
mean2.2011LJW(smallX, smallY) # run the test
library(SHT)
