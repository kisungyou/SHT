counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(100)  # sample x from N(0,1)
counter[i] = ifelse(mvar1.LRT(x)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mvar1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.2020YLL(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
library(SHT)
sim1.2020YLL(smallX) # run the test
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=10)
counter[i] = ifelse(sim1.2020YLL(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim1.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=10)
counter[i] = ifelse(sim1.2020YLL(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim1.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
niter   = 10000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=10)
counter[i] = ifelse(sim1.2020YLL(X)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim1.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
vec.alpha = seq(from=0.01, to=0.99, length.out=100)
vec.error = rep(0,100)
for (i in 1:100){
vec.error[i] = sum((pvalues <= vec.alpha[i]))/length(vec.alpha)
}
opar <- par(pty="s")
plot(vec.alpha, vec.error)
niter   = 10000
pvalues = rep(0,niter)
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=25)
pvalues[i] = sim1.2020YLL(X)$p.value
counter[i] = ifelse(pvalues[i] < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim1.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## visualize
vec.alpha = seq(from=0.01, to=0.99, length.out=100)
vec.error = rep(0,100)
for (i in 1:100){
vec.error[i] = sum((pvalues <= vec.alpha[i]))/length(vec.alpha)
}
opar <- par(pty="s")
plot(vec.alpha, vec.error)
abline(a=0, b=1)
abline(a=1, b=0, lwd=2, col="red")
abline(a=1, b=0, lwd=2, col="red")
abline(a=0, b=1, lwd=2, col="red")
help(abline)
plot(vec.alpha, vec.error, type="l", po)
vec.error
vec.alpha = seq(from=0.01, to=0.99, length.out=100)
vec.error = rep(0,100)
for (i in 1:100){
vec.error[i] = sum((pvalues <= vec.alpha[i]))/length(vec.alpha)
}
vec.error
sum((pvalues <= vec.alpha[i]))
vec.alpha = seq(from=0.01, to=0.99, length.out=100)
vec.error = rep(0,100)
for (i in 1:100){
vec.error[i] = sum((pvalues <= vec.alpha[i]))/length(pvalues)
}
opar <- par(pty="s")
plot(vec.alpha, vec.error, type="l", po)
abline(a=0, b=1, lwd=2, col="red")
opar <- par(pty="s")
plot(vec.alpha, vec.error, type="l")
abline(a=0, b=1, lwd=2, col="red")
plot(vec.alpha, vec.error, type="b", pch=19)
plot(vec.alpha, vec.error, type="b", pch=18)
plot(vec.alpha, vec.error, type="b", pch=17)
plot(vec.alpha, vec.error, type="b")
## empirical Type 1 error
niter   = 10000
pvalues = rep(0,niter)
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=25)
pvalues[i] = sim1.2020YLL(X)$p.value
counter[i] = ifelse(pvalues[i] < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim1.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## visualize
vec.alpha = seq(from=0.01, to=0.99, length.out=100)
vec.error = rep(0,100)
for (i in 1:100){
vec.error[i] = sum((pvalues <= vec.alpha[i]))/length(pvalues)
}
opar <- par(pty="s")
plot(vec.alpha, vec.error, type="b", main="Type 1 Error")
abline(a=0, b=1, lwd=2, col="red")
par(opar)
## empirical Type 1 error
niter   = 10000
pvalues = rep(0,niter)
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=25)
pvalues[i] = sim1.2020YLL(X)$p.value
counter[i] = ifelse(pvalues[i] < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'sim1.2020YLL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## visualize
vec.alpha = seq(from=0.01, to=0.99, length.out=100)
vec.error = rep(0,100)
for (i in 1:100){
vec.error[i] = sum((pvalues <= vec.alpha[i]))/length(pvalues)
}
opar <- par(pty="s")
plot(vec.alpha, vec.error, type="b", main="Type 1 Error")
abline(a=0, b=1, lwd=2, col="red")
par(opar)
library(SHT)
pkgdown::build_site()
library(SHT)
library(SHT)
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
mean2.2014CLX(smallX, smallY, precision="unknown")
mean2.2014CLX(smallX, smallY, precision="sparse")
library(SHT)
pkgdown::build_site()
library(SHT)
library(SHT)
pkgdown::build_site()
library(SHT)
pkgdown::build_site()
library(SHT)
pkgdown::build_site()
library(SHT)
pkgdown::build_site()
library(SHT)
## CRAN-purpose small example
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
cov2.2012LC(smallX, smallY) # run the test
## CRAN-purpose small example
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
cov2.2012LC(smallX, smallY) # run the test
## CRAN-purpose small example
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
cov2.2012LC(smallX, smallY) # run the test
## CRAN-purpose small example
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
cov2.2012LC(smallX, smallY) # run the test
## CRAN-purpose small example
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
cov2.2012LC(smallX, smallY) # run the test
## CRAN-purpose small example
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
cov2.2012LC(smallX, smallY) # run the test
## CRAN-purpose small example
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
cov2.2012LC(smallX, smallY) # run the test
## CRAN-purpose small example
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
cov2.2012LC(smallX, smallY) # run the test
## CRAN-purpose small example
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
cov2.2012LC(smallX, smallY) # run the test
## CRAN-purpose small example
smallX = matrix(rnorm(10*3),ncol=3)
smallY = matrix(rnorm(10*3),ncol=3)
cov2.2012LC(smallX, smallY) # run the test
smallX = matrix(rnorm(180*3),ncol=3)
smallY = matrix(rnorm(180*3),ncol=3)
cov2.2012LC(smallX, smallY) # run the test
cov2.2012LC(smallX, smallY, unbiased = TRUE)
## empirical Type 1 error : use 'biased' version for faster computation
niter   = 100
counter = rep(0,niter)
for (i in 1:niter){
X = matrix(rnorm(500*25), ncol=10)
Y = matrix(rnorm(500*25), ncol=10)
counter[i] = ifelse(cov2.2012LC(X,Y,unbiased=TRUE)$p.value  < 0.05,1,0)
print(paste0("iteration ",i,"/100 complete.."))
}
## print the result
cat(paste("\n* Example for 'cov2.2012LC'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error : use 'biased' version for faster computation
niter   = 100
counter = rep(0,niter)
for (i in 1:niter){
X = matrix(rnorm(500*25), ncol=10)
Y = matrix(rnorm(500*25), ncol=10)
counter[i] = ifelse(cov2.2012LC(X,Y,unbiased=TRUE)$p.value  < 0.05,1,0)
print(paste0("iteration ",i,"/100 complete.."))
}
## print the result
cat(paste("\n* Example for 'cov2.2012LC'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error : use 'biased' version for faster computation
niter   = 100
counter = rep(0,niter)
for (i in 1:niter){
X = matrix(rnorm(500*25), ncol=10)
Y = matrix(rnorm(500*25), ncol=10)
counter[i] = ifelse(cov2.2012LC(X,Y,unbiased=TRUE)$p.value  < 0.05,1,0)
print(paste0("iteration ",i,"/100 complete.."))
}
## print the result
cat(paste("\n* Example for 'cov2.2012LC'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*5), ncol=10)
Y = matrix(rnorm(50*5), ncol=10)
counter[i] = ifelse(cov2.2015WL(X, Y)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'cov2.2015WL'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error : use 'biased' version for faster computation
niter   = 1000
counter = rep(0,niter)
for (i in 1:niter){
X = matrix(rnorm(500*25), ncol=10)
Y = matrix(rnorm(500*25), ncol=10)
counter[i] = ifelse(cov2.2012LC(X,Y,unbiased=TRUE)$p.value  < 0.05,1,0)
print(paste0("iteration ",i,"/100 complete.."))
}
## print the result
cat(paste("\n* Example for 'cov2.2012LC'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error : use 'biased' version for faster computation
niter   = 1000
counter = rep(0,niter)
for (i in 1:niter){
X = matrix(rnorm(500*25), ncol=100)
Y = matrix(rnorm(500*25), ncol=100)
counter[i] = ifelse(cov2.2012LC(X,Y,unbiased=TRUE)$p.value  < 0.05,1,0)
print(paste0("iteration ",i,"/1000 complete.."))
}
## print the result
cat(paste("\n* Example for 'cov2.2012LC'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error : use 'biased' version for faster computation
niter   = 1000
counter = rep(0,niter)
for (i in 1:niter){
X = matrix(rnorm(500*25), ncol=50)
Y = matrix(rnorm(500*25), ncol=50)
counter[i] = ifelse(cov2.2012LC(X,Y,unbiased=TRUE)$p.value  < 0.05,1,0)
print(paste0("iteration ",i,"/1000 complete.."))
}
## print the result
cat(paste("\n* Example for 'cov2.2012LC'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error : use 'biased' version for faster computation
niter   = 1000
counter = rep(0,niter)
for (i in 1:niter){
X = matrix(rnorm(500*25), ncol=10)
Y = matrix(rnorm(500*25), ncol=10)
counter[i] = ifelse(cov2.2012LC(X,Y,unbiased=TRUE)$p.value  < 0.05,1,0)
print(paste0("iteration ",i,"/1000 complete.."))
}
## print the result
cat(paste("\n* Example for 'cov2.2012LC'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
rm(list=ls())
library(SHT)
pkgdown::build_site()
pkgdown::build_site()
library(SHT)
library(SHT)
help(pf)
pf(2.1, 3, 4)
pf(7.2, 3, 4, lower.tail)
pf(7.2, 3, 4, lower.tail=TRUE)
pf(7.2, 3, 4, lower.tail=FALSE)
library(SHT)
library(SHT)
devtools::document()
library(SHT)
library(SHT)
library(SHT)
smallX = matrix(rnorm(10*3),ncol=3)
sim1.LRT(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.LRT(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.LRT(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.LRT(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.LRT(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.LRT(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.LRT(smallX) # run the test
smallX = matrix(rnorm(10*3),ncol=3)
sim1.LRT(smallX) # run the test
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=10)
counter[i] = ifelse(sim1.LRT(X)$p.value < 0.05, 1, 0)
print(paste("* iteration ",i,"/1000 complete..."))
}
## print the result
cat(paste("\n* Example for 'sim1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(50*10), ncol=10)
counter[i] = ifelse(sim1.LRT(X)$p.value < 0.05, 1, 0)
print(paste("* iteration ",i,"/1000 complete..."))
}
## print the result
cat(paste("\n* Example for 'sim1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(100*10), ncol=10)
counter[i] = ifelse(sim1.LRT(X)$p.value < 0.05, 1, 0)
print(paste("* iteration ",i,"/1000 complete..."))
}
## print the result
cat(paste("\n* Example for 'sim1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(100*10), ncol=10)
counter[i] = ifelse(sim1.LRT(X)$p.value < 0.05, 1, 0)
print(paste("* iteration ",i,"/1000 complete..."))
}
## print the result
cat(paste("\n* Example for 'sim1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(100*10), ncol=10)
counter[i] = ifelse(sim1.LRT(X)$p.value < 0.05, 1, 0)
print(paste("* iteration ",i,"/1000 complete..."))
}
## print the result
cat(paste("\n* Example for 'sim1.LRT'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(10*20), ncol=20)
Y = matrix(rnorm(10*20), ncol=20)
counter[i] = ifelse(mean2.2011LJW(X,Y)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mean2.2011LJW'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(10*20), ncol=20)
Y = matrix(rnorm(10*20), ncol=20)
counter[i] = ifelse(mean2.2011LJW(X,Y)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mean2.2011LJW'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
X = matrix(rnorm(10*20), ncol=20)
Y = matrix(rnorm(10*20), ncol=20)
counter[i] = ifelse(mean2.2011LJW(X,Y)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'mean2.2011LJW'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
library(SHT)
## empirical Type 1 error : use 'biased' version for faster computation
niter   = 1000
counter = rep(0,niter)
for (i in 1:niter){
X = matrix(rnorm(500*25), ncol=10)
Y = matrix(rnorm(500*25), ncol=10)
counter[i] = ifelse(cov2.2012LC(X,Y,use.unbiased=FALSE)$p.value  < 0.05,1,0)
print(paste0("iteration ",i,"/1000 complete.."))
}
## print the result
cat(paste("\n* Example for 'cov2.2012LC'\n","*\n",
"* number of rejections   : ", sum(counter),"\n",
"* total number of trials : ", niter,"\n",
"* empirical Type 1 error : ",round(sum(counter/niter),5),"\n",sep=""))
pkgdown::build_site()
install.packages("xtensor")
install.packages("zipfR")
library(SHT)
library(SHT)
pkgdown::build_site()
library(SHT)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
