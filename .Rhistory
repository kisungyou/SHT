## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=100)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=100)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=100)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=100)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=100)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=100)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=2)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=2)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=2)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=1.1)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=1.1)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=1.1)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=1.1)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=1.1)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=1.1)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=1.1)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=1.1)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=1.1)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=1.1)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=1.1)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(57)  # sample x from N(0,1)
y = rnorm(89, sd=1.1)  # sample y from N(0,1)
counter[i] = ifelse(var2.F(x,y, alternative="greater")$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var2.F'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
library(SHT)
library(SHT)
help(t.test)
var2.F(rnorm(10),rnorm(20), alternative = "g")
library(SHT)
library(SHT)
library(SHT)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(50)  # sample x from N(0,1)
counter[i] = ifelse(var1.chisq(x,var0=1)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var1.chisq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(50)  # sample x from N(0,1)
counter[i] = ifelse(var1.chisq(x,var0=1)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var1.chisq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(50)  # sample x from N(0,1)
counter[i] = ifelse(var1.chisq(x,var0=1)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var1.chisq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(50)  # sample x from N(0,1)
counter[i] = ifelse(var1.chisq(x,var0=1)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var1.chisq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(50)  # sample x from N(0,1)
counter[i] = ifelse(var1.chisq(x,var0=1)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var1.chisq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(50)  # sample x from N(0,1)
counter[i] = ifelse(var1.chisq(x,var0=1)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var1.chisq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(50)  # sample x from N(0,1)
counter[i] = ifelse(var1.chisq(x,var0=1)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var1.chisq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(50)  # sample x from N(0,1)
counter[i] = ifelse(var1.chisq(x,var0=1)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var1.chisq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(50)  # sample x from N(0,1)
counter[i] = ifelse(var1.chisq(x,var0=1)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var1.chisq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
x = rnorm(50)  # sample x from N(0,1)
counter[i] = ifelse(var1.chisq(x,var0=1)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'var1.chisq'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
library(SHT)
## test when k=5 (samples)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = rnorm(50)
}
counter[i] = ifelse(meank.anova(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.anova'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 (samples)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = rnorm(50)
}
counter[i] = ifelse(meank.anova(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.anova'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 (samples)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = rnorm(50)
}
counter[i] = ifelse(meank.anova(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.anova'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
## test when k=5 (samples)
## empirical Type 1 error
niter   = 1000
counter = rep(0,niter)  # record p-values
for (i in 1:niter){
mylist = list()
for (j in 1:5){
mylist[[j]] = rnorm(50)
}
counter[i] = ifelse(meank.anova(mylist)$p.value < 0.05, 1, 0)
}
## print the result
cat(paste("\n* Example for 'meank.anova'\n\n",
sprintf("* number of rejections   : %d\n",sum(counter)),
sprintf("* total number of trials : %d\n",niter),
sprintf("* empirical Type 1 error : %.4f\n", sum(counter/niter)),sep=""))
help(aov)
help("meank.anova")
library(SHT)
help("meank.anova")
library(SHT)
A = matrix(rnorm(25),nrow=5)
A = A%*%t(A)
b = A%*%rnorm(5)
solve(A,b)
library(SHT)
library(SHT)
install.packages("fastclime")
library(fastclime)
L = fastclime.generator(n=200,d=50,graph="hub")
names(L)
L$sigma
mydata = L$data
dim(mydata)
out = fastclime(mydata)
out$maxnlambda
out$sigmahat
dim(out$sigmahat)
fastclime.plot(out$path[[3]])
help(fastclime)
#generate data
L = fastclime.generator(n = 100, d = 20)
#graph path estimation
out1 = fastclime(L$data,0.1)
out2 = fastclime.selector(out1$lambdamtx, out1$icovlist,0.2)
fastclime.plot(out2$adaj)
#graph path estimation using the sample covariance matrix as the input.
out1 = fastclime(cor(L$data),0.1)
out2 = fastclime.selector(out1$lambdamtx, out1$icovlist,0.2)
fastclime.plot(out2$adaj)
library(Matrix)
rankMatrix(cor(matrix(rnorm(10,20))))
rankMatrix(cor(matrix(rnorm(25),nrow=5)))
rankMatrix(cor(matrix(rnorm(25),nrow=5)))
rankMatrix(cor(matrix(rnorm(25),nrow=5)))
rankMatrix(cor(matrix(rnorm(25),nrow=5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
rankMatrix(cor(matrix(rnorm(100*5),ncol = 5)))
library(SHT)
