varTest(dat, sigma.squared = 1, alternative="greater")$p.value
varTest(dat, sigma.squared = 1, alternative="less")$p.value
pchisq((length(dat)-1)*sd(dat), df=(length(dat)-1))
?pchisq
length(dat)
rm(list=ls())
dat = rnorm(100)
n = length(dat)
vardat = var(dat)
pchisq((n-1)*vardat, df=(n-1), lower.tail=FALSE)
varTest(dat)
pchisq((n-1)*vardat, df=(n-1), lower.tail=FALSE)
varTest(dat)$p.value
varTest(dat, alternative="greater")$p.value
pchisq((n-1)*vardat, df=(n-1), lower.tail=TRUE)
varTest(dat, alternative="two.sided")$p.value
library(SHT)
var1.chisq(dat)
x <- rnorm(50, mean = 0, sd = 2)
y <- rnorm(30, mean = 1, sd = 1)
var.test(x,y,alternative="two.sided")$p.value
var.test(x,y,alternative="less")$p.value
var.test(x,y,alternative="greater]")$p.value
var.test(x,y,alternative="greater")$p.value
var.test(y,z,alternative="two.sided")$p.value
var.test(y,x,alternative="two.sided")$p.value
var.test(y,x,alternative="less")$p.value
?pchisq
?pf
?opf
?pf
library(SHT)
check_dlist1_single <- function(x){
cond1 = ((is.vector(x)))
cond2 = (all(!is.infinite(x)))
cond3 = (all(!is.na(x)))
cond4 = (all(!is.complex(x)))
if (cond1&&cond2&&cond3&&cond4){
return(TRUE)
} else {
return(FALSE)
}
}
data = list()
data[[1]] = rnorm(3)
data[[2]] = rnorm(5)
lapply(data, check_dlist1_single)
check_dlist1d <- function(dlist){
cond1 = (is.list(dlist))
cond2 = (length(dlist)>=2)
cond3 = (all(unlist(lapply(dlist,check_dlist1d_single))==TRUE))
if (cond1&&cond2&&cond3){
return(TRUE)
} else {
stop()
}
}
check_dlist1d(data)
check_dlist1d_single <- function(x){
cond1 = ((is.vector(x)))
cond2 = (all(!is.infinite(x)))
cond3 = (all(!is.na(x)))
cond4 = (all(!is.complex(x)))
if (cond1&&cond2&&cond3&&cond4){
return(TRUE)
} else {
return(FALSE)
}
}
check_dlist1d(data)
data[[3]] = NA
check_dlist1d(data)
library(SHT)
data
data[[3]] = rnorm(10)
vark.Bartlett(data)
?log
hh = "hey\;"
hh = "hey\\"
hh = "hey\'"
hh
library(SHT)
data
data[[1]] = rnorm(100)
data[[2]] = rnorm(100)
data[[3]] = rnorm(100)
vark.Bartlett(data)
vark.Bartlett(data)
library(SHT)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
vark.Bartlett(data)
library(SHT)
library(SHT)
library(SHT)
library(SHT)
?abs
data = list(3)
data
data = list(length=30)
data
rm(list=ls())
(for i in 1:5){print(rnorm(1))}
for (i in 1:4){print(rnorm(1))}
data = list()
data[[1]] = 1:5
data[[2]] = 6:10
mean(unlist(data))
unlist(data)
?median
?mean
x
x = rnorm(3)
x(1)
x[1]
library(SHT)
output = rep(0,1000)
for (i in 1:1000){}
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.Levene(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)
?median
median(1:5)
median(1:6)
library(SHT)
library(SHT)
library(SHT)
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.Levene(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.Levene(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.Levene(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.Levene(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.Levene(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)/1000
is.list(data)
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
sum(output)/1000
sum(output)/1000
sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}; sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}; sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}; sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}; sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}; sum(output)/1000
for (i in 1:1000){data=list();data[[1]]=rnorm(100);data[[2]]=rnorm(300);data[[3]]=rnorm(500);if (vark.BrownForsythe(data)$p.value<0.05){output[i]=1}else{output[i]=0}}; sum(output)/1000
require(CovTools)
install.packages("CovTools")
?lm
??aov
x = c(rnorm(10),c(rnorm(10),c(rnorm(10))))
group = as.factor(c(rep(1,10),rep(2,10),rep(3,10)))
summary(aov(x~group))
?aov
aovout = aov(x~group)
aovout$coefficients
aovout
aovout$fitted.values
names(aovout)
aovout$assign
aovout$qr
aovout$p.value
##############################################################
# COMPUTATION : USE AOV INTERFACE
aovout = summary(aov(data~group))
aovout = summary(aovout)
names(aovout)
aovout
class(aovout)
aovout[1,1]
aovout
typeof(aovout)
names(aovout)
names(aovout)
aovout
data = x
aovout = aov(data~group)
aovout$model
aovout
aovout
aovout$effects
aovout$contrasts
aovout$terms
aovout$model
aovout$call
aovout$xlevels
?anova
class(aovout)
aovout$residuals
aovout$effects
summary(aovout)
as.matrix(summary(aovout))
ss = as.matrix(summary(aovout))
ss
ss(1,1)
ss[1,1]
ss = summary(aovout)
ss
class(ss)
unlist(ss)
##############################################################
# COMPUTATION : USE AOV INTERFACE
aovout = unlist(summary(aov(data~group)))
aovout[5]
aovout[6]
aovout[8]
aovout[7]
thestat = as.double(aovout[7])
thestat
pvalue  = as.double(aovout[9])
pvalue
rm(list=ls())
library(SHT)
dlist=li
data = list()
data[[1]] = rnorm(100)
data[[2]] = rnorm(50)
data[[3]] = rnorm(100)
output = meank.anova(data)
library(SHT)
data = list()
data[[1]] = rnorm(100)
data[[2]] = rnorm(50)
data[[3]] = rnorm(100)
output = meank.anova(data)
output
tester = rep(0,1000)
for (i in 1:1000){
data = list()
data[[1]] = rnorm(100)
data[[2]] = rnorm(50)
data[[3]] = rnorm(100)
output = meank.anova(data)
if (output$p.value < 0.05){
tester[i] = 1
}
}
print(sum(tester)/1000)
tester = rep(0,1000)
for (i in 1:1000){
data = list()
data[[1]] = rnorm(100)
data[[2]] = rnorm(50)
data[[3]] = rnorm(100)
output = meank.anova(data)
if (output$p.value < 0.05){
tester[i] = 1
}
}
print(sum(tester)/1000)
tester = rep(0,1000)
for (i in 1:1000){
data = list()
data[[1]] = rnorm(100)
data[[2]] = rnorm(50)
data[[3]] = rnorm(100)
output = meank.anova(data)
if (output$p.value < 0.05){
tester[i] = 1
}
}
print(sum(tester)/1000)
tester = rep(0,1000)
for (i in 1:1000){
data = list()
data[[1]] = rnorm(100)
data[[2]] = rnorm(50)
data[[3]] = rnorm(100)
output = meank.anova(data)
if (output$p.value < 0.05){
tester[i] = 1
}
}
print(sum(tester)/1000)
library(SHT)
?CovTools
??CovTools
library(SHT)
x = c(10,50,100,200,400)
y = x*(x+1)/2
y
??highmeans
install.packages("highmeans")
install.packages("highmean")
install.packages(c("Matrix", "Rcpp", "Rdpack", "Rvmmin", "XML", "bindr", "bindrcpp", "cluster", "config", "curl", "deldir", "dfoptim", "glmnet", "hms", "igraph", "interp", "lme4", "lmtest", "lubridate", "maps", "network", "nlme", "packrat", "plogr", "psych", "randomForest", "repr", "reticulate", "rsconnect", "scatterplot3d", "selectr", "spam", "spatstat", "stringi", "survival", "withr", "xts", "yaml"))
library(SHT)
library(SHT)
require(highmean)
X = matrix(rnorm(100*5),nrow=100)
Y = matrix(rnorm(50*5), nrow=50)
apval_Bai1996(X,Y)$pval
mean2.Bai1996(X,Y)
?pnorm
pnorm(mean2.Bai1996(X,Y))
pnorm(mean2.Bai1996(X,Y))*2
colMeans(X)
xbar = colMeans(X)
output = array(0,c(5,5))
for(i in 1:nrow(X)){vecdiff=as.vector(X(i,:))-xbar;output = output+outer(vecdiff,vecdiff)}
for(i in 1:nrow(X)){vecdiff=as.vector(X(i,)-xbar;output = output+outer(vecdiff,vecdiff)}
for(i in 1:nrow(X)){vecdiff=as.vector(X(i,))-xbar;output = output+outer(vecdiff,vecdiff)}
for(i in 1:nrow(X)){vecdiff=as.vector(X[i,])-xbar;output = output+outer(vecdiff,vecdiff)}
nrow(X)
99*cov(X)
output
apval_Bai1996(X,Y)
thestat = mean2.Bai1996(X,Y)
thestat
pnorm(thestat,lower.tail=FALSE)
clc
library(SHT)
apval_Bai1996(X,Y)
apval_Bai1996(X,Y)$pvalue
apval_Bai1996(X,Y)$p.value
apval_Bai1996(X,Y)$pval
thestat = mean2.Bai1996(X,Y)
thestat
pnorm(thestat,lower.tail = FALSE)
library(SHT)
apval_Bai1996(X,Y)$pval
mean2.Bai1996(X,Y)
library(SHT)
apval_Bai1996(X,Y)$pval
mean2.Bai1996(X,Y)
library(SHT)
library(SHT)
?mean2.Bai1996
library(SHT)
library(SHT)
x = rnorm(10)
x
x
x[x<0]=0
x
library(SHT)
apval_Cai2014(X,Y)
apval_Cai2014(X,Y)$pval
mean2.Cai2014(X,Y)$pvalue
mean2.Cai2014(X,Y)$p.value
library(SHT)
apval_Cai2014(X,Y)$pval
mean2.Cai2014(X,Y)$pvalue
mean2.Cai2014(X,Y)$p.value
library(SHT)
apval_Cai2014(X,Y)$pval
mean2.Cai2014(X,Y)$p.value
library(SHT)
library(SHT)
mean2.Cai2014(X,Y)$p.value
library(SHT)
?pnorm
library(SHT)
X = matrix(rnorm(100*40),nrow=100)
Y = matrix(rnorm(50*40), nrow=50)
mean2.Chen2010(X,Y)$pvalue
library(SHT)
mean2.Chen2010(X,Y)$pvalue
mean2.Chen2010(X,Y)$p.value
mean2.Chen2010(X,Y)$p.value
require(highmean)
apval_Chen2010(X,Y)$pval
sum(matrix(rnorm(40,3),nrow=3))
sum(matrix(rnorm(40*3),nrow=3))
mean2.Chen2010(X,Y)$pvalue
mean2.Chen2010(X,Y)$p.value
mean2.Chen2010(X,Y)$p.value
library(SHT)
ls("package=SHT")
help("package=SHT")
ls("package:SHT")
library(SHT)
methods(class="hypothesis")
methods(summary)
library(SHT)
x = rnorm(10)
y = rnorm(20)
out = mean2.Student(x,y)
print(out)
library(SHT)
print(out)
methods(summary)
??aovlist
??aov
??manova
methods(print)
methods(summary)
library(SHT)
print(out)
?hypothesis
?print
methods(print)
methods(hypothesis)
library(SHT)
out
print(out)
library(SHT)
library(SHT)
out = mean2.Student(x,y)
out
print(out)
print(out)
library(SHT)
out
print(out)
?format
library(SHT)
print(out)
?htest
??htest
t.test(x,y)
?getOption
library(SHT)
?print.hypothesis
print(out)
library(SHT)
print(out)
print(out)
library(SHT)
print(out)
library(SHT)
print(out)
t.test(x,y)
library(SHT)
print(out)
print(out)
library(SHT)
print(out)
library(SHT)
print(out)
library(SHT)
print(out)
print(out)
library(SHT)
print(out)
x = rnorm(100); y=rnorm(50); print(mean2.Student(x,y))
x = rnorm(100); y=rnorm(50); print(mean2.Student(x,y))
x = rnorm(100); y=rnorm(50); print(mean2.Student(x,y))
x = rnorm(100); y=rnorm(50); print(mean2.Student(x,y))
x = rnorm(100); y=rnorm(50); print(mean2.Student(x,y))
x = rnorm(100); y=rnorm(50); print(mean2.Student(x,y))
x = rnorm(100); y=rnorm(50); print(mean2.Student(x,y))
x = rnorm(100); y=rnorm(50); print(mean2.Student(x,y))
x = rnorm(100); y=rnorm(50); print(mean2.Student(x,y))
x = rnorm(100); y=rnorm(50); print(mean2.Student(x,y))
x = rnorm(100); y=rnorm(50); print(mean2.Student(x,y))
x = rnorm(100); y=rnorm(50); print(mean2.Student(x,y))
library(SHT)
methods(hypothesis)
methods(print)
median
hypothesis
library(SHT)
methods(print)
rm(list=ls())
library(SHT)
x=rnorm(100);y=rnorm(50);print(mean2.Student(x,y))
?print
library(SHT)
x=rnorm(100);y=rnorm(50);print(mean2.Student(x,y))
x=rnorm(100);y=rnorm(50);print(mean2.Student(x,y))
x=rnorm(100);y=rnorm(50);print(mean2.Student(x,y))
library(SHT)
?suppressPackageStartupMessages
library(SHT)
library(SHT)
library(SHT)
library(SHT)
x = rnorm(100)
y = x*2+rnorm(100)/10
out = lm(y~x)
print(out)
print(out)
print(summary(lm))
print(summary(out))
ls("package:SHT")
library(SHT)
library(SHT)
out = mean2.Student(rnorm(100),rnorm(100))
print(out)
ls("package:SHT")
library(SHT)
ls("package:SHT")
print(out)
out = mean2.Student(rnorm(100),rnorm(100)); print(out)
library(SHT)
ls("package:SHT")
out = mean2.Student(rnorm(100),rnorm(100)); print(out)
library(SHT)
ls("package:SHT")
out = mean2.Student(rnorm(100),rnorm(100)); print(out)
library(SHT)
